import os  
from dotenv import load_dotenv
from discord import app_commands
import discord
from discord.ext import commands
from keep_alive import keep_alive
import random
import json
import asyncio
import pymongo
from pymongo import MongoClient
from datetime import datetime, timedelta
import math
import aiocron

load_dotenv()

# Connexion MongoDB
mongo_uri = os.getenv("MONGO_URI")
client = MongoClient(mongo_uri)
db = client['Cass-Eco2']
collection = db['commandes']

# V√©rification MongoDB
try:
    client.admin.command('ping')
    print("‚úÖ Connexion √† MongoDB r√©ussie !")
except Exception as e:
    print(f"‚ùå √âchec de connexion √† MongoDB : {e}")
    exit()

cooldowns = {}

token = os.getenv('TOKEN_BOT_DISCORD')

# Intents et configuration du bot
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!!", intents=intents)

@bot.event
async def on_ready():
    print(f"‚úÖ Le bot est connect√© en tant que {bot.user} (ID: {bot.user.id})")

    # Afficher les commandes charg√©es
    print("üìå Commandes disponibles :")
    for command in bot.commands:
        print(f"- {command.name}")

    try:
        # Synchroniser les commandes avec Discord
        synced = await bot.tree.sync()  # Synchronisation des commandes slash
        print(f"‚úÖ Commandes slash synchronis√©es : {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"‚ùå Erreur de synchronisation des commandes slash : {e}")


#------------------------------------------------------------------------- Commandes d'√©conomie : !!break

# Liste des r√¥les autoris√©s pour ex√©cuter les commandes de mod√©ration
AUTHORIZED_ROLES = ["‚Ä≥ [ùë∫◊•] Perm Protect !!rob"]

@bot.command(name="break")
async def breakk(ctx, membre: discord.Member):
    """Ajoute un r√¥le fixe √† un utilisateur et retire un autre r√¥le fixe √† l'ex√©cutant.
       Seuls ceux ayant '[ùë∫◊•] Perm Anti Protect' peuvent utiliser cette commande.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Protect !!rob"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_REMOVE_BREAK = "‚Ä≥ [ùë∫◊•] Protect !!rob"       # R√¥le √† ajouter au membre cibl√©
    ROLE_TO_REMOVE = "‚Ä≥ [ùë∫◊•] Perm Protect !!rob"     # R√¥le √† retirer √† l'ex√©cutant

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_remove_break = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE_BREAK)
    role_to_remove = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE)

    if not role_required or not role_to_remove_break or not role_to_remove:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # V√©rifie si le membre a le r√¥le avant de le retirer
    if role_to_remove_break not in membre.roles:
        await ctx.send(f"{membre.mention} n'a pas le r√¥le {role_to_remove_break.mention}. <:haram:1176229029796380702>")
    else:
        await membre.remove_roles(role_to_remove_break)
        await ctx.send(f"Le r√¥le {role_to_remove_break.mention} a √©t√© enlev√©. <a:fete:1172810362261880873>")

    # Retirer le r√¥le √† l'ex√©cutant
    if role_to_remove in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove)
        await ctx.send(f"Le r√¥le {role_to_remove.mention} vous a √©t√© retir√©. <a:emoji:1341500461475168369>")
    else:
        await ctx.send(f"{ctx.author.mention}, vous n'aviez pas le r√¥le {role_to_remove.mention}. ‚ùå")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!malus

# Commande classique pour "malus"
@bot.command(name="malus")
async def malus(ctx, membre: discord.Member):
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Ajout Malus"
    ROLE_TO_ADD_MALUS = "‚Ä≥ [ùë∫◊•] Malus Temporelle"
    ROLE_TO_REMOVE_MALUS = "‚Ä≥ [ùë∫◊•] Perm Ajout Malus"

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add_malus = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD_MALUS)
    role_to_remove_malus = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE_MALUS)

    if not role_required or not role_to_add_malus or not role_to_remove_malus:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # Ajouter le r√¥le temporaire √† l'utilisateur
    await membre.add_roles(role_to_add_malus)
    await ctx.send(f"Le r√¥le {role_to_add_malus.mention} a √©t√© ajout√©. üéâ") 

    # Retirer le r√¥le √† l'ex√©cutant
    if role_to_remove_malus in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove_malus)
        await ctx.send(f"Le r√¥le {role_to_remove_malus.mention} a √©t√© retir√©. üé≠")
    else:
        await ctx.send(f"{ctx.author.mention}, vous n'aviez pas le r√¥le {role_to_remove_malus.mention}. ‚ùå")

    # Attendre 24 heures avant de retirer le r√¥le
    await asyncio.sleep(604800)
    await membre.remove_roles(role_to_add_malus)
    await ctx.send(f"Le r√¥le {role_to_add_malus.mention} a √©t√© retir√© de {membre.mention} apr√®s 1 semaine. ‚è≥")
#------------------------------------------------------------------------- Commandes d'√©conomie : !!annihilation

@bot.command(name="annihilation")
async def annihilation(ctx, membre: discord.Member):
    """Ajoute le r√¥le 'Cible D'an√©antissement' √† un utilisateur si l'ex√©cutant a le r√¥le 'Perm Crystal D'an√©antissement'.
       Un embed est envoy√© dans un salon sp√©cifique (avec un ping) et l'ex√©cutant perd son r√¥le 'Perm Crystal D'an√©antissement'.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Crystal D'an√©antissement"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD = "‚Ä≥ [ùë∫◊•] Cible D'an√©antissement"  # R√¥le √† ajouter √† la cible
    CHANNEL_ID = 1341844144032714833  # Salon sp√©cial pour l'annonce
    ROLE_PING_ID = 792755123587645461  # ID √† ping

    # R√©cup√©ration des r√¥les et du salon
    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD)
    channel = bot.get_channel(CHANNEL_ID)

    if not role_required or not role_to_add or not channel:
        return await ctx.send("‚ùå L'un des r√¥les ou le salon sp√©cifi√© n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # Ajouter le r√¥le √† la cible et retirer le r√¥le de l'ex√©cutant
    await membre.add_roles(role_to_add)
    await ctx.author.remove_roles(role_required)

    # Cr√©ation de l'embed avec les informations demand√©es
    embed = discord.Embed(
        title="Annihilation",
        color=discord.Color.dark_red(),
        description="Un an√©antissement a √©t√© effectu√©."
    )
    embed.add_field(name="Cibleur", value=ctx.author.mention, inline=True)
    embed.add_field(name="Cible", value=membre.mention, inline=True)
    embed.add_field(name="R√¥le attribu√©", value=role_to_add.mention, inline=False)
    embed.set_footer(text="Annihilation ex√©cut√©e")
    embed.timestamp = ctx.message.created_at

    # Envoi dans le salon sp√©cial avec le ping au-dessus de l'embed
    ping = f"<@{ROLE_PING_ID}>"
    await channel.send(content=ping, embed=embed)

    # Confirmation dans le canal d'ex√©cution de la commande
    await ctx.send(f"‚úÖ {membre.mention} a √©t√© cibl√© par un an√©antissement. Le r√¥le {role_to_add.mention} a √©t√© attribu√©.")
#------------------------------------------------------------------------- Commandes d'√©conomie : !!gravity

@bot.command(name="gravity")
async def gravity(ctx, membre: discord.Member):
    """Ajoute le r√¥le '‚Ä≥ [ùë∫◊•] Gravit√© Forte' √† un utilisateur, retire le r√¥le '‚Ä≥ [ùë∫◊•] Perm Gravit√© Forte' de l'ex√©cutant,
       et envoie un message confirmant l'op√©ration.
       Seuls ceux ayant le r√¥le '‚Ä≥ [ùë∫◊•] Perm Gravit√© Forte' peuvent utiliser cette commande.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Gravit√© Forte"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD = "‚Ä≥ [ùë∫◊•] Gravit√© Forte"  # R√¥le √† ajouter
    ROLE_TO_REMOVE = "‚Ä≥ [ùë∫◊•] Perm Gravit√© Forte"  # R√¥le √† retirer √† l'ex√©cutant

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD)
    role_to_remove = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE)

    if not role_required or not role_to_add or not role_to_remove:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # Ajouter le r√¥le √† la cible
    await membre.add_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} a √©t√© ajout√© √† {membre.mention}. üåå")

    # Retirer le r√¥le √† l'ex√©cutant
    if role_to_remove in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove)
        await ctx.send(f"Le r√¥le {role_to_remove.mention} vous a √©t√© retir√©. ‚ùå")
    else:
        await ctx.send(f"{ctx.author.mention}, vous n'aviez pas le r√¥le {role_to_remove.mention}. ‚ùå")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!spatial

@bot.command(name="spatial")
async def spatial(ctx):
    """Ajoute temporairement le r√¥le '[ùë∫◊•] Spatial' si l'utilisateur a '[ùë∫◊•] Perm Spatial',
       et applique un cooldown de 24 heures. L'heure de la derni√®re utilisation est enregistr√©e dans la base de donn√©es MongoDB.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Spatial"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD = "‚Ä≥ [ùë∫◊•] Spatial"  # R√¥le √† ajouter temporairement
    COOLDOWN_DURATION = 86400  # 24 heures en secondes
    TEMP_ROLE_DURATION = 3600  # 1 heure en secondes

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD)

    if not role_required or not role_to_add:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # Connexion √† la base de donn√©es
    user_data = collection.find_one({"user_id": ctx.author.id})

    if user_data:
        last_used = user_data.get("last_used", 0)
    else:
        last_used = 0

    now = datetime.datetime.utcnow().timestamp()

    # V√©rifier si l'utilisateur est en cooldown
    if now - last_used < COOLDOWN_DURATION:
        remaining_time = int((COOLDOWN_DURATION - (now - last_used)) / 3600)
        return await ctx.send(f"‚ùå Vous devez attendre encore {remaining_time} heure(s) avant de r√©utiliser cette commande.")

    # Ajouter le r√¥le temporaire
    await ctx.author.add_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} vous a √©t√© attribu√© pour 1 heure. üöÄ")

    # Mettre √† jour l'heure de la derni√®re utilisation dans la base de donn√©es
    collection.update_one({"user_id": ctx.author.id}, {"$set": {"last_used": now}}, upsert=True)

    # Supprimer le r√¥le apr√®s 1 heure
    await asyncio.sleep(TEMP_ROLE_DURATION)
    await ctx.author.remove_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} vous a √©t√© retir√© apr√®s 1 heure. ‚è≥")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!heal

@bot.command(name="heal")
async def heal(ctx):
    """Supprime les r√¥les de malus et retire le r√¥le permettant d'utiliser la commande, avec un message en embed."""
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Anti-Dote"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_REMOVE_1 = "‚Ä≥ [ùë∫◊•] Gravit√© Forte"  # Premier r√¥le √† enlever
    ROLE_TO_REMOVE_2 = "‚Ä≥ [ùë∫◊•] Malus Temporelle"  # Deuxi√®me r√¥le √† enlever

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_remove_1 = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE_1)
    role_to_remove_2 = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE_2)

    if not role_required or not role_to_remove_1 or not role_to_remove_2:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    roles_removed = []

    # V√©rifier et retirer les r√¥les si pr√©sents
    if role_to_remove_1 in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove_1)
        roles_removed.append(role_to_remove_1.mention)

    if role_to_remove_2 in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove_2)
        roles_removed.append(role_to_remove_2.mention)

    # Cr√©ation de l'embed en fonction du nombre de r√¥les supprim√©s
    embed = discord.Embed(color=discord.Color.green())

    if len(roles_removed) == 2:
        embed.title = "‚ú® Gu√©rison Compl√®te"
        embed.description = f"{ctx.author.mention}, vous avez √©t√© totalement purg√© de vos blessures et mal√©dictions ! Plus rien ne vous entrave. üè•"
        embed.add_field(name="R√¥les retir√©s", value=", ".join(roles_removed), inline=False)

    elif len(roles_removed) == 1:
        embed.title = "üåø Gu√©rison Partielle"
        embed.description = f"{ctx.author.mention}, vous avez √©t√© gu√©ri de **{roles_removed[0]}** ! Encore un petit effort pour √™tre totalement r√©tabli. üíä"

    else:
        embed.title = "üòÇ Tentative de gu√©rison √©chou√©e"
        embed.description = f"{ctx.author.mention}, tu essaies de te soigner alors que tu n'as rien ? T'es un clown !? ü§°"

    await ctx.send(embed=embed)

    # Retirer le r√¥le "Perm Anti-Dote" apr√®s l'utilisation
    await ctx.author.remove_roles(role_required)

    embed_removal = discord.Embed(
        title="üîª Antidote consomm√©",
        description=f"{ctx.author.mention}, votre **{role_required.mention}** a √©t√© retir√© apr√®s utilisation.",
        color=discord.Color.red()
    )
    await ctx.send(embed=embed_removal)
#------------------------------------------------------------------------- Commandes d'√©conomie : !!protect

@bot.command(name="protect")
async def protect(ctx):
    """Ajoute temporairement le r√¥le '[ùë∫◊•] Protect !!rob' si l'utilisateur a '[ùë∫◊•] Perm Protect !!rob',
       et applique un cooldown de 48 heures.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Protect !!rob"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD = "‚Ä≥ [ùë∫◊•] Protect !!rob"  # R√¥le √† ajouter temporairement
    COOLDOWN_DURATION = 172800  # 48 heures en secondes
    TEMP_ROLE_DURATION = 172800  # 48 heures en secondes

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD)

    if not role_required or not role_to_add:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    now = datetime.datetime.utcnow().timestamp()

    # V√©rifier si l'utilisateur est en cooldown dans la base de donn√©es
    user_data = collection.find_one({"user_id": ctx.author.id})

    if user_data:
        last_used = user_data.get("last_used", 0)
        time_since_last_use = now - last_used
        if time_since_last_use < COOLDOWN_DURATION:
            remaining_time = int((COOLDOWN_DURATION - time_since_last_use) / 3600)
            return await ctx.send(f"‚ùå Vous devez attendre encore {remaining_time} heure(s) avant de r√©utiliser cette commande.")
    else:
        # Si l'utilisateur n'a pas de donn√©es dans la base, l'ajouter
        collection.insert_one({"user_id": ctx.author.id, "last_used": now})

    # Ajouter le r√¥le temporaire
    await ctx.author.add_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} vous a √©t√© attribu√© pour 2 jours. üöÄ")

    # Mettre √† jour l'heure d'utilisation dans la base de donn√©es
    collection.update_one({"user_id": ctx.author.id}, {"$set": {"last_used": now}}, upsert=True)

    # Supprimer le r√¥le apr√®s 48 heures
    await asyncio.sleep(TEMP_ROLE_DURATION)
    await ctx.author.remove_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} vous a √©t√© retir√© apr√®s 2 jours. ‚è≥")

#------------------------------------------------------------------------- Commandes d'√©conomie : /embed

THUMBNAIL_URL = "https://github.com/Cass64/EtheryaBot/blob/main/images_etherya/etheryBot_profil.jpg?raw=true"

# Fonction pour v√©rifier si une URL est valide
def is_valid_url(url):
    regex = re.compile(
        r'^(https?://)?'  # http:// ou https:// (optionnel)
        r'([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'  # domaine
        r'(/.*)?$'  # chemin (optionnel)
    )
    return bool(re.match(regex, url))

class EmbedBuilderView(discord.ui.View):
    def __init__(self, author: discord.User, channel: discord.TextChannel):
        super().__init__(timeout=180)
        self.author = author
        self.channel = channel
        self.embed = discord.Embed(title="Titre", description="Description", color=discord.Color.blue())
        self.embed.set_thumbnail(url=THUMBNAIL_URL)
        self.second_image_url = None
        self.message = None  # Stocke le message contenant l'embed

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user != self.author:
            await interaction.response.send_message("‚ùå Vous ne pouvez pas modifier cet embed.", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="Modifier le titre", style=discord.ButtonStyle.primary)
    async def edit_title(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedTitleModal(self))

    @discord.ui.button(label="Modifier la description", style=discord.ButtonStyle.primary)
    async def edit_description(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedDescriptionModal(self))

    @discord.ui.button(label="Changer la couleur", style=discord.ButtonStyle.primary)
    async def edit_color(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.embed.color = discord.Color.random()
        if self.message:
            await self.message.edit(embed=self.embed, view=self)
        else:
            await interaction.response.send_message("Erreur : impossible de modifier le message.", ephemeral=True)

    @discord.ui.button(label="Ajouter une image", style=discord.ButtonStyle.secondary)
    async def add_image(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedImageModal(self))

    @discord.ui.button(label="Ajouter 2√®me image", style=discord.ButtonStyle.secondary)
    async def add_second_image(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedSecondImageModal(self))

    @discord.ui.button(label="Envoyer", style=discord.ButtonStyle.success)
    async def send_embed(self, interaction: discord.Interaction, button: discord.ui.Button):
        embeds = [self.embed]
        if self.second_image_url:
            second_embed = discord.Embed(color=self.embed.color)
            second_embed.set_image(url=self.second_image_url)
            embeds.append(second_embed)

        await self.channel.send(embeds=embeds)
        await interaction.response.send_message("‚úÖ Embed envoy√© !", ephemeral=True)

class EmbedTitleModal(discord.ui.Modal):
    def __init__(self, view: EmbedBuilderView):
        super().__init__(title="Modifier le Titre")
        self.view = view
        self.title_input = discord.ui.TextInput(label="Nouveau Titre", required=True)
        self.add_item(self.title_input)

    async def on_submit(self, interaction: discord.Interaction):
        self.view.embed.title = self.title_input.value
        if self.view.message:
            await self.view.message.edit(embed=self.view.embed, view=self.view)
        else:
            await interaction.response.send_message("Erreur : impossible de modifier le message.", ephemeral=True)

class EmbedDescriptionModal(discord.ui.Modal):
    def __init__(self, view: EmbedBuilderView):
        super().__init__(title="Modifier la description")
        self.view = view
        self.description = discord.ui.TextInput(
            label="Nouvelle description",
            style=discord.TextStyle.paragraph,
            max_length=4000
        )
        self.add_item(self.description)

    async def on_submit(self, interaction: discord.Interaction):
        self.view.embed.description = self.description.value
        if self.view.message:
            await self.view.message.edit(embed=self.view.embed, view=self.view)
        else:
            await interaction.response.send_message("Erreur : impossible de modifier le message.", ephemeral=True)

class EmbedImageModal(discord.ui.Modal):
    def __init__(self, view: EmbedBuilderView):
        super().__init__(title="Ajouter une image")
        self.view = view
        self.image_input = discord.ui.TextInput(label="URL de l'image", required=False)
        self.add_item(self.image_input)

    async def on_submit(self, interaction: discord.Interaction):
        if self.image_input.value and is_valid_url(self.image_input.value):
            self.view.embed.set_image(url=self.image_input.value)
            if self.view.message:
                await self.view.message.edit(embed=self.view.embed, view=self.view)
            else:
                await interaction.response.send_message("Erreur : impossible de modifier le message.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå URL invalide.", ephemeral=True)

class EmbedSecondImageModal(discord.ui.Modal):
    def __init__(self, view: EmbedBuilderView):
        super().__init__(title="Ajouter une 2√®me image")
        self.view = view
        self.second_image_input = discord.ui.TextInput(label="URL de la 2√®me image", required=False)
        self.add_item(self.second_image_input)

    async def on_submit(self, interaction: discord.Interaction):
        if self.second_image_input.value and is_valid_url(self.second_image_input.value):
            self.view.second_image_url = self.second_image_input.value
            if self.view.message:
                await self.view.message.edit(embed=self.view.embed, view=self.view)
            else:
                await interaction.response.send_message("Erreur : impossible de modifier le message.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå URL invalide.", ephemeral=True)

@bot.tree.command(name="embed", description="Cr√©er un embed personnalis√©")
async def embed_builder(interaction: discord.Interaction):
    role_id = 1170326040485318686  # ID du r√¥le requis
    if not any(role.id == role_id for role in interaction.user.roles):
        return await interaction.response.send_message("‚ùå Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)

    await interaction.response.defer(ephemeral=True)

    view = EmbedBuilderView(interaction.user, interaction.channel)
    response = await interaction.followup.send(embed=view.embed, view=view, ephemeral=True)
    view.message = response  # Stocke le message contenant la View

@bot.event
async def on_message(message):
    if message.attachments:
        attachment = message.attachments[0]
        if attachment.content_type and attachment.content_type.startswith("image/"):
            embed = discord.Embed(title="Image ajout√©e")
            embed.set_thumbnail(url=THUMBNAIL_URL)
            embed.set_image(url=attachment.url)
            await message.channel.send(embed=embed)

    await bot.process_commands(message)
#------------------------------------------------------------------------- Commandes classiques pour les pr√™t 


#------------------------------------------------------------------------- Commandes /frags

@bot.tree.command(name="frags")
async def frags(interaction: discord.Interaction, user: discord.Member):
    """Ajoute le r√¥le Frags Quotidien √† un utilisateur pour 24 heures et enregistre l'expiration en base de donn√©es."""
    if not any(role.name == GF_REQUIRED_ROLE for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.", ephemeral=True)
        return

    FRAG_ROLE = "‚Ä≥ [ùë∫◊•] Frags Quotidien"
    frag_role = discord.utils.get(interaction.guild.roles, name=FRAG_ROLE)

    if not frag_role:
        await interaction.response.send_message(f"‚ùå Le r√¥le `{FRAG_ROLE}` n'existe pas sur ce serveur.", ephemeral=True)
        return

    await user.add_roles(frag_role)
    expiration_time = datetime.utcnow() + timedelta(hours=24)

    # Enregistrer l'expiration en base de donn√©es
    collection.update_one(
        {"user_id": user.id},
        {"$set": {"expires_at": expiration_time}},
        upsert=True
    )

    await interaction.response.send_message(f"‚úÖ {user.mention} a re√ßu le r√¥le `{FRAG_ROLE}` pour 24 heures.", ephemeral=True)

    # Envoi de l'embed dans le salon staff
    CHANNEL_ID = 1341671012109914173
    salon_staff = interaction.guild.get_channel(CHANNEL_ID)
    if salon_staff:
        embed = discord.Embed(title="Vente Frags Quotidien", color=discord.Color.blue())
        embed.add_field(name="Acheteur", value=interaction.user.mention, inline=True)
        embed.add_field(name="Vendeur", value=user.mention, inline=True)
        embed.set_footer(text="Frags vendus via la commande /frags")
        await salon_staff.send(embed=embed)

#------------------------------------------------------------------------- Commandes frags-time

@bot.tree.command(name="frags_time")
async def frags_timeleft(interaction: discord.Interaction, user: discord.Member):
    """Affiche le temps restant avant que le r√¥le Frags Quotidien soit retir√©."""
    record = collection.find_one({"user_id": user.id})
    
    if not record or "expires_at" not in record:
        await interaction.response.send_message(f"‚ùå {user.mention} n'a pas de r√¥le Frags Quotidien actif.", ephemeral=True)
        return

    expiration = record["expires_at"]
    time_left = expiration - datetime.utcnow()

    if time_left.total_seconds() <= 0:
        await interaction.response.send_message(f"‚ùå {user.mention} n'a plus le r√¥le Frags Quotidien.", ephemeral=True)
        return

    hours, remainder = divmod(int(time_left.total_seconds()), 3600)
    minutes, _ = divmod(remainder, 60)

    embed = discord.Embed(
        title="‚è≥ Temps restant pour Frags Quotidien",
        description=f"{user.mention} perdra son r√¥le dans **{hours}h {minutes}m**.",
        color=discord.Color.green()
    )
    embed.set_footer(text="Ce r√¥le est temporaire, il sera retir√© apr√®s 24 heures.")
    await interaction.response.send_message(embed=embed)

#------------------------------------------------------------------------- Commandes /pret


# R√¥le requis pour certaines commandes
GF_REQUIRED_ROLE = "‚Ä≥ [ùë∫◊•] Gestion & Finance Team"

# Dictionnaire pour stocker les pr√™ts en cours (persistant dans MongoDB)
prets_en_cours = {}

# Commandes classiques avec pr√©fixe qui n√©cessitent le r√¥le
@bot.command(name="pret10k")
async def pret10k(ctx, membre: discord.Member):
    """Enregistre un pr√™t de 10k avec d√©tails dans un salon staff."""
    if not any(role.name == GF_REQUIRED_ROLE for role in ctx.author.roles):
        return await ctx.send("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.")
    await enregistrer_pret(ctx, membre, montant=10000, montant_rendu=11500, duree="1 Semaine")

@bot.command(name="pret25k")
async def pret25k(ctx, membre: discord.Member):
    """Enregistre un pr√™t de 25k avec d√©tails dans un salon staff."""
    if not any(role.name == GF_REQUIRED_ROLE for role in ctx.author.roles):
        return await ctx.send("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.")
    await enregistrer_pret(ctx, membre, montant=25000, montant_rendu=28750, duree="1 Semaine")

@bot.command(name="pret50k")
async def pret50k(ctx, membre: discord.Member):
    """Enregistre un pr√™t de 50k avec d√©tails dans un salon staff."""
    if not any(role.name == GF_REQUIRED_ROLE for role in ctx.author.roles):
        return await ctx.send("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.")
    await enregistrer_pret(ctx, membre, montant=50000, montant_rendu=57500, duree="1 Semaine")

async def enregistrer_pret(ctx, membre, montant, montant_rendu, duree):
    """Enregistre un pr√™t avec d√©tails et envoie un message dans le salon staff."""
    CHANNEL_ID = 1340674704964583455  # Remplacez par l'ID du salon staff
    salon_staff = bot.get_channel(CHANNEL_ID)

    if not salon_staff:
        return await ctx.send("‚ùå Le salon staff n'a pas √©t√© trouv√©.")

    embed = discord.Embed(title="üìú Nouveau Pr√™t", color=discord.Color.blue())
    embed.add_field(name="üë§ Pseudonyme", value=membre.mention, inline=True)
    embed.add_field(name="üí∞ Montant demand√©", value=f"{montant:,} cr√©dits", inline=True)
    embed.add_field(name="üìÑ Ticket/Formulaire", value="Ticket", inline=True)
    embed.add_field(name="üìÖ Date pour rendre", value=duree, inline=True)
    embed.add_field(name="üí≥ Montant √† rendre", value=f"{montant_rendu:,} cr√©dits", inline=True)
    embed.add_field(name="üîÑ Statut", value="En Cours", inline=True)
    embed.set_footer(text=f"Pr√™t enregistr√© par {ctx.author.display_name}")

    # Sauvegarde du pr√™t dans MongoDB
    prets_en_cours[membre.id] = {"montant": montant, "montant_rendu": montant_rendu, "statut": "En Cours"}
    collection.update_one({"user_id": membre.id}, {"$set": {"pret": prets_en_cours[membre.id]}}, upsert=True)

    await salon_staff.send(embed=embed)
    await ctx.send(f"‚úÖ Pr√™t de {montant:,} cr√©dits accord√© √† {membre.mention}. D√©tails envoy√©s aux staff.")

@bot.command(name="terminer")
async def terminer(ctx, membre: discord.Member):
    """Marque un pr√™t comme 'Pay√©' si l'utilisateur avait un pr√™t en cours."""
    CHANNEL_ID = 1340674704964583455  # ID du salon staff
    salon_staff = bot.get_channel(CHANNEL_ID)

    if not salon_staff:
        return await ctx.send("‚ùå Le salon staff n'a pas √©t√© trouv√©.")

    # V√©rifier si l'utilisateur a un pr√™t en cours dans la base de donn√©es
    user_data = collection.find_one({"user_id": membre.id})
    if not user_data or "pret" not in user_data:
        return await ctx.send(f"‚ùå {membre.mention} n'a aucun pr√™t en cours.")

    # R√©cup√©ration des d√©tails du pr√™t
    pret = user_data["pret"]
    montant = pret["montant"]
    montant_rendu = pret["montant_rendu"]

    # Cr√©ation de l'embed pour confirmer le remboursement
    embed = discord.Embed(title="‚úÖ Pr√™t Rembours√©", color=discord.Color.green())
    embed.add_field(name="üë§ Pseudonyme", value=membre.mention, inline=True)
    embed.add_field(name="üí∞ Montant demand√©", value=f"{montant:,} cr√©dits", inline=True)
    embed.add_field(name="üìÑ Ticket/Formulaire", value="Ticket", inline=True)
    embed.add_field(name="üí≥ Montant rembours√©", value=f"{montant_rendu:,} cr√©dits", inline=True)
    embed.add_field(name="üîÑ Statut", value="Pay√©", inline=True)
    embed.set_footer(text=f"Pr√™t rembours√© confirm√© par {ctx.author.display_name}")

    # Mettre √† jour le statut du pr√™t dans la base de donn√©es
    pret["statut"] = "Pay√©"
    collection.update_one({"user_id": membre.id}, {"$set": {"pret": pret}})

    await salon_staff.send(embed=embed)
    await ctx.send(f"‚úÖ Le pr√™t de {montant:,} cr√©dits de {membre.mention} est marqu√© comme rembours√©.")

    # Envoi d'un MP au membre
    try:
        await membre.send(f"‚úÖ Bonjour {membre.mention}, ton pr√™t de **{montant:,} cr√©dits** a bien √©t√© rembours√©. "
                          f"Le statut de ton pr√™t a √©t√© mis √† jour comme **Pay√©**.")
    except discord.Forbidden:
        await ctx.send(f"‚ùå Impossible d'envoyer un MP √† {membre.mention}, il a d√©sactiv√© les messages priv√©s.")  

@bot.tree.command(name="pret")
@app_commands.describe(
    membre="Le membre √† qui le pr√™t est accord√©",
    montant="Le montant du pr√™t",
    montant_√†_rendre="Le montant √† rendre",
    duree="La dur√©e du pr√™t",
    methode="M√©thode utilis√©e : Ticket ou Formulaire"
)
async def pret(interaction: discord.Interaction, membre: discord.Member, montant: int, montant_√†_rendre: int, duree: str, methode: str):
    """Enregistre un pr√™t avec les d√©tails dans un salon staff."""
    if methode.lower() not in ["ticket", "formulaire"]:
        await interaction.response.send_message("‚ùå M√©thode invalide. Choisis entre `Ticket` ou `Formulaire`.", ephemeral=True)
        return

    if not any(role.name == GF_REQUIRED_ROLE for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.", ephemeral=True)
        return

    # Appel de la fonction pour enregistrer le pr√™t
    await enregistrer_pret(interaction, membre, montant, montant_√†_rendre, duree, methode.capitalize())

async def enregistrer_pret(interaction: discord.Interaction, membre: discord.Member, montant: int, montant_√†_rendre: int, duree: str, methode: str):
    """Enregistre un pr√™t avec d√©tails et envoie un message dans le salon staff."""
    CHANNEL_ID = 1340674704964583455  # ID du salon staff
    salon_staff = interaction.guild.get_channel(CHANNEL_ID)

    if not salon_staff:
        return await interaction.response.send_message("‚ùå Le salon staff n'a pas √©t√© trouv√©.", ephemeral=True)

    embed = discord.Embed(title="üìú Nouveau Pr√™t", color=discord.Color.blue())
    embed.add_field(name="üë§ Pseudonyme", value=membre.mention, inline=True)
    embed.add_field(name="üí∞ Montant demand√©", value=f"{montant:,} cr√©dits", inline=True)
    embed.add_field(name="üìÑ M√©thode", value=methode, inline=True)
    embed.add_field(name="üìÖ Date pour rendre", value=duree, inline=True)
    embed.add_field(name="üí≥ Montant √† rendre", value=f"{montant_√†_rendre:,} cr√©dits", inline=True)
    embed.add_field(name="üîÑ Statut", value="En Cours", inline=True)
    embed.set_footer(text=f"Pr√™t enregistr√© par {interaction.user.display_name}")  # Utilisation correcte de `interaction.user`

    # Sauvegarde du pr√™t dans MongoDB
    prets_en_cours[membre.id] = {
        "montant": montant, 
        "montant_rendu": montant_√†_rendre, 
        "methode": methode, 
        "statut": "En Cours"
    }
    collection.update_one({"user_id": membre.id}, {"$set": {"pret": prets_en_cours[membre.id]}}, upsert=True)

    await salon_staff.send(embed=embed)
    await interaction.response.send_message(f"‚úÖ Pr√™t de {montant:,} cr√©dits accord√© √† {membre.mention} avec la m√©thode `{methode}`. D√©tails envoy√©s aux staff.")


@bot.tree.command(name="pretpayer")
async def pretpayer(interaction: discord.Interaction, membre: discord.Member):
    """Marque un pr√™t comme 'Pay√©' si l'utilisateur avait un pr√™t en cours."""
    if not any(role.name == GF_REQUIRED_ROLE for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.", ephemeral=True)
        return

    CHANNEL_ID = 1340674730683924593  # ID du salon staff
    salon_staff = interaction.guild.get_channel(CHANNEL_ID)

    if not salon_staff:
        return await interaction.response.send_message("‚ùå Le salon staff n'a pas √©t√© trouv√©.", ephemeral=True)

    # V√©rifier si l'utilisateur a un pr√™t en cours dans la base de donn√©es
    user_data = collection.find_one({"user_id": membre.id})
    if not user_data or "pret" not in user_data:
         return await interaction.response.send_message(f"‚ùå {membre.mention} n'a pas de pr√™t en cours.", ephemeral=True)

  # R√©cup√©ration des d√©tails du pr√™t
    pret = user_data["pret"]
    montant = pret["montant"]
    montant_rendu = pret["montant_rendu"]

    # Cr√©ation de l'embed pour confirmer le remboursement
    embed = discord.Embed(title="‚úÖ Pr√™t Rembours√©", color=discord.Color.green())
    embed.add_field(name="üë§ Pseudonyme", value=membre.mention, inline=True)
    embed.add_field(name="üí∞ Montant demand√©", value=f"{montant:,} cr√©dits", inline=True)
    embed.add_field(name="üìÑ M√©thode", value=pret.get("methode", "Non sp√©cifi√©e"), inline=True)
    embed.add_field(name="üí≥ Montant rembours√©", value=f"{montant_rendu:,} cr√©dits", inline=True)
    embed.add_field(name="üîÑ Statut", value="Pay√©", inline=True)
    embed.set_footer(text=f"Pr√™t rembours√© confirm√© par {interaction.user.display_name}")

    # Mettre √† jour le statut du pr√™t dans la base de donn√©es
    pret["statut"] = "Pay√©"
    collection.update_one({"user_id": membre.id}, {"$set": {"pret": pret}})

    await salon_staff.send(embed=embed)
    await interaction.response.send_message(f"‚úÖ Le pr√™t de {montant:,} cr√©dits de {membre.mention} est marqu√© comme rembours√©.")

    # Envoi d'un MP au membre
    try:
        await membre.send(f"‚úÖ Bonjour {membre.mention}, ton pr√™t de **{montant:,} cr√©dits** a bien √©t√© rembours√©. "
                          f"Le statut de ton pr√™t a √©t√© mis √† jour comme **Pay√©**.")
    except discord.Forbidden:
        await interaction.response.send_message(f"‚ùå Impossible d'envoyer un MP √† {membre.mention}, il a d√©sactiv√© les messages priv√©s.", ephemeral=True)

#------------------------------------------------------------------------- Commandes de Livret A
@bot.tree.command(name="investirlivreta")  # Tout en minuscules
@app_commands.describe(montant="Somme √† investir (max 100,000)")
async def investir_livret(interaction: discord.Interaction, montant: int):
    """Investit une somme dans le Livret A (max 100k)"""
    if montant <= 0 or montant > 100_000:
        await interaction.response.send_message("‚ùå Tu dois investir entre **1 et 100,000** üí∞.", ephemeral=True)
        return

    user_id = interaction.user.id
    user_data = collection.find_one({"user_id": user_id})

    ancien_montant = user_data["livretA"] if user_data and "livretA" in user_data else 0
    nouveau_montant = ancien_montant + montant

    collection.update_one(
        {"user_id": user_id},
        {"$set": {"livretA": nouveau_montant}},
        upsert=True
    )

    # ID du salon et du r√¥le √† ping
    CHANNEL_ID = 1343687225790959647  # Remplace par l'ID du salon
    ROLE_ID = 1341494709184368734  # Remplace par l'ID du r√¥le 
    salon = interaction.guild.get_channel(CHANNEL_ID)
    role_ping = f"<@&{ROLE_ID}>"  # Ping du r√¥le

    embed = discord.Embed(
        title="üì• Investissement - Livret A",
        description=f"{interaction.user.mention} a investi **{montant}** üí∞ dans son Livret A !\nüí∞ Total : **{nouveau_montant}**",
        color=discord.Color.green()
    )

    if salon:
        await salon.send(content=role_ping, embed=embed)
    
    await interaction.response.send_message(f"‚úÖ Tu as investi **{montant}** üí∞ dans ton Livret A ! (Total: {nouveau_montant} üí∞) Cela peut prendre quelques heures avant que l'argent soit ajout√© √† ton livret.", ephemeral=True)

#---------------------------------------------------------------

@bot.tree.command(name="livreta")
async def consulter_livret(interaction: discord.Interaction):
    """Affiche la somme actuelle dans le Livret A de l'utilisateur."""
    await interaction.response.defer(ephemeral=True)

    user_id = interaction.user.id
    record = collection.find_one({"user_id": user_id})

    if not record or "livretA" not in record:
        await interaction.followup.send("üí∞ Vous n'avez pas encore investi dans un Livret A.", ephemeral=True)
        return

    montant = record["livretA"]
    embed = discord.Embed(
        title="üìà Solde du Livret A",
        description=f"üí∞ Votre solde actuel : **{montant}** cr√©dits",
        color=discord.Color.green()
    )
    embed.set_footer(text="Les int√©r√™ts sont ajout√©s chaque semaine (+2%).")
    
    await interaction.followup.send(embed=embed, ephemeral=True)

#---------------------------------------------------------------

@bot.tree.command(name="retirerlivreta")  # Tout en minuscules
@app_commands.describe(montant="Somme √† retirer (laisser vide pour tout retirer)")
async def retirer_livret(interaction: discord.Interaction, montant: int = None):
    """Retire une somme du Livret A et notifie un salon."""
    user_id = interaction.user.id
    user_data = collection.find_one({"user_id": user_id})

    if not user_data or "livretA" not in user_data or user_data["livretA"] == 0:
        await interaction.response.send_message("‚ùå Tu n'as pas d'argent dans ton Livret A.", ephemeral=True)
        return
    
    montant_max = user_data["livretA"]
    montant = montant if montant is not None else montant_max

    if montant <= 0 or montant > montant_max:
        await interaction.response.send_message(f"‚ùå Tu peux retirer entre **1 et {montant_max}** üí∞.", ephemeral=True)
        return

    collection.update_one(
        {"user_id": user_id},
        {"$inc": {"livretA": -montant}}
    )

    # ID du salon et du r√¥le 
    CHANNEL_ID =  1343674317053104349 # Remplace par l'ID du salon
    ROLE_ID = 1341494709184368734  # Remplace par l'ID du r√¥le
    salon = interaction.guild.get_channel(CHANNEL_ID)
    role_ping = f"<@&{ROLE_ID}>"  # Ping du r√¥le

    embed = discord.Embed(
        title="üí∏ Demande de Retrait - Livret A",
        description=f"{interaction.user.mention} souhaite retirer **{montant}** üí∞ de son Livret A.",
        color=discord.Color.orange()
    )
    embed.set_footer(text="Un administrateur doit valider cette demande.")

    if salon:
        await salon.send(content=role_ping, embed=embed)
    
    await interaction.response.send_message(f"‚úÖ Tu as demand√© √† retirer **{montant}** üí∞ de ton Livret A ! Cela peut prendre quelques heure avant que ton argent te soit ajouter √† ton compte.", ephemeral=True)

#---------------------------------------------------------------

@aiocron.crontab("0 0 * * 0")  # Tous les dimanches √† 00:00 UTC
async def ajouter_interets():
    """Ajoute 2% d'int√©r√™ts sur le Livret A chaque dimanche √† minuit."""
    utilisateurs = collection.find({"livretA": {"$gt": 0}})
    for user in utilisateurs:
        user_id = user["user_id"]
        montant = user["livretA"]
        nouveaux_interets = math.floor(montant * 0.02)  # 2% d'int√©r√™t arrondi

        collection.update_one(
            {"user_id": user_id},
            {"$inc": {"livretA": nouveaux_interets}}
        )

        print(f"‚úÖ Int√©r√™ts ajout√©s : {user_id} a gagn√© {nouveaux_interets} üí∞")

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

PERM_CONSTRUCTION_ROLE_ID = 1343697977893453864
ENTREPRENEUR_ROLE_ID = 1343697977893453864
ANNOUNCE_CHANNEL_ID = 1343698434653159424
COOLDOWN_TIME = timedelta(hours=24)

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Commande pour construire une entreprise
@bot.tree.command(name="constructionentreprise", description="Construire une entreprise")
async def construction_entreprise(interaction: discord.Interaction):
    user = interaction.user
    role = discord.Object(id=PERM_CONSTRUCTION_ROLE_ID)

    if role not in user.roles:
        return await interaction.response.send_message(
            "‚ùå Vous n'avez pas la permission de construire une entreprise.", ephemeral=True
        )

    # Mise √† jour de la base de donn√©es pour enregistrer la construction
    collection.update_one(
        {"user_id": user.id},
        {"$set": {"entreprise_constructed": True}},
        upsert=True
    )

    # Embed pour le joueur
    embed_user = discord.Embed(
        title="üèóÔ∏è Construction d'Entreprise",
        description=f"{user.mention}, vous avez construit une entreprise avec succ√®s ! üéâ",
        color=discord.Color.green()
    )
    embed_user.set_footer(text="Bonne chance pour votre nouvelle entreprise !")

    await interaction.response.send_message(embed=embed_user, ephemeral=True)

    # Embed dans le salon d'annonce
    announce_channel = bot.get_channel(ANNOUNCE_CHANNEL_ID)
    if announce_channel:
        embed_announce = discord.Embed(
            title="üì¢ Nouvelle Entreprise Construite !",
            description=f"{user.mention} vient de construire une entreprise ! üè¢",
            color=discord.Color.blue()
        )
        embed_announce.set_footer(text="V√©rifiez si tout est en r√®gle.")
        await announce_channel.send(embed=embed_announce)

# Commande pour collecter les revenus de l'entreprise
@bot.tree.command(name="collectentreprise", description="Collecter les revenus de votre entreprise")
async def collect_entreprise(interaction: discord.Interaction):
    user = interaction.user
    role = discord.Object(id=ENTREPRENEUR_ROLE_ID)

    if role not in user.roles:
        return await interaction.response.send_message(
            "‚ùå Vous devez √™tre un entrepreneur pour collecter des revenus.", ephemeral=True
        )

    # V√©rification du cooldown dans MongoDB
    user_data = collection.find_one({"user_id": user.id})
    if user_data:
        last_time = user_data.get("last_collect_time", None)
    else:
        last_time = None

    now = datetime.utcnow()

    if last_time and now - last_time < COOLDOWN_TIME:
        remaining_time = COOLDOWN_TIME - (now - last_time)
        hours, remainder = divmod(int(remaining_time.total_seconds()), 3600)
        minutes = remainder // 60
        return await interaction.response.send_message(
            f"‚è≥ Vous devez attendre encore {hours}h {minutes}m avant de collecter √† nouveau.", ephemeral=True
        )

    # G√©n√©ration d'un montant al√©atoire entre 25,000 et 50,000
    amount = random.randint(25000, 50000)

    # Mise √† jour de la base de donn√©es avec la nouvelle collecte et le cooldown
    collection.update_one(
        {"user_id": user.id},
        {
            "$set": {"last_collect_time": now},
            "$inc": {"balance": amount}
        },
        upsert=True
    )

    # Embed de gain
    embed_gain = discord.Embed(
        title="üí∞ Revenus d'Entreprise",
        description=f"{user.mention}, vous avez collect√© **{amount:,}** pi√®ces gr√¢ce √† votre entreprise ! üè¶",
        color=discord.Color.gold()
    )
    embed_gain.set_footer(text="Revenez demain pour un autre retrait.")

    await interaction.response.send_message(embed=embed_gain, ephemeral=True)

    # Message dans le salon d'annonce
    announce_channel = bot.get_channel(ANNOUNCE_CHANNEL_ID)
    if announce_channel:
        embed_announce = discord.Embed(
            title="üì¢ Revenus d'Entreprise Collect√©s",
            description=f"{user.mention} vient de r√©cup√©rer **{amount:,}** pi√®ces de son entreprise. üí∞",
            color=discord.Color.blue()
        )
        embed_announce.set_footer(text="Surveillez les transactions.")
        await announce_channel.send(embed=embed_announce)


# Commande pour quitter l'entreprise
@bot.tree.command(name="quitterentreprise", description="Quitter ou supprimer votre entreprise")
async def quitter_entreprise(interaction: discord.Interaction):
    user = interaction.user
    role = discord.Object(id=ENTREPRENEUR_ROLE_ID)

    # V√©rifie si l'utilisateur a le r√¥le entrepreneur
    if role not in user.roles:
        return await interaction.response.send_message(
            "‚ùå Vous devez √™tre un entrepreneur pour quitter une entreprise.", ephemeral=True
        )

    # V√©rifie si l'utilisateur a une entreprise construite
    user_data = collection.find_one({"user_id": user.id})
    if not user_data or not user_data.get("entreprise_constructed", False):
        return await interaction.response.send_message(
            "‚ùå Vous n'avez pas d'entreprise √† quitter.", ephemeral=True
        )

    # Retirer le r√¥le Entrepreneur
    await user.remove_roles(role)

    # Supprimer l'enregistrement de l'entreprise dans la base de donn√©es
    collection.update_one(
        {"user_id": user.id},
        {"$set": {"entreprise_constructed": False}, "$unset": {"last_collect_time": "", "balance": ""}},
        upsert=True
    )

    # Embed de confirmation pour l'utilisateur
    embed_user = discord.Embed(
        title="üö´ Quitter l'Entreprise",
        description=f"{user.mention}, vous avez quitt√© votre entreprise avec succ√®s. Tous les enregistrements ont √©t√© supprim√©s.",
        color=discord.Color.red()
    )
    embed_user.set_footer(text="Vous pouvez revenir si vous souhaitez en construire une autre.")

    await interaction.response.send_message(embed=embed_user, ephemeral=True)

    # Message dans le salon d'annonce
    announce_channel = bot.get_channel(ANNOUNCE_CHANNEL_ID)
    if announce_channel:
        embed_announce = discord.Embed(
            title="üì¢ Un Entrepreneur Quitte Son Entreprise",
            description=f"{user.mention} vient de quitter son entreprise. üè¢üö∂‚Äç‚ôÇÔ∏è",
            color=discord.Color.blue()
        )
        embed_announce.set_footer(text="Un autre entrepreneur peut d√©sormais prendre sa place.")
        await announce_channel.send(embed=embed_announce)


#------------------------------------------------------------------------- calcul

@bot.tree.command(name="calcul", description="Calcule un pourcentage d'un nombre")
@app_commands.describe(nombre="Le nombre de base", pourcentage="Le pourcentage √† appliquer (ex: 15 pour 15%)")
async def calcul(interaction: discord.Interaction, nombre: float, pourcentage: float):
    await interaction.response.defer()  # ‚úÖ Correctement plac√© √† l'int√©rieur de la fonction

    resultat = (nombre * pourcentage) / 100
    embed = discord.Embed(
        title="üìä Calcul de pourcentage",
        description=f"{pourcentage}% de {nombre} = **{resultat}**",
        color=discord.Color.green()
    )

    await interaction.followup.send(embed=embed)

#------------------------------------------------------------------------- Ignorer les messages des autres bots
@bot.event
async def on_message(message):
    # Ignorer les messages envoy√©s par d'autres bots
    if message.author.bot:
        return

    # V√©rifie si le message mentionne uniquement le bot
    if bot.user.mentioned_in(message) and message.content.strip().startswith(f"<@{bot.user.id}>"):
        embed = discord.Embed(
            title="üìú Liste des Commandes",
            description="Voici la liste des commandes disponibles :",
            color=discord.Color(0xFFFFFF)
        )

        # Assure-toi de r√©cup√©rer les objets de r√¥le pour pouvoir les mentionner
        role_gravity = discord.utils.get(message.guild.roles, name="[ùë∫◊•] Gravit√© Forte")
        role_spatial = discord.utils.get(message.guild.roles, name="[ùë∫◊•] Spatial")

        # Ajout des commandes
        embed.add_field(
            name="üí• !!break <membre>",
            value="Retire un r√¥le sp√©cifique √† un membre. Exemple : !!break @Utilisateur",
            inline=False
        )
        embed.add_field(
            name="‚è≥ !!malus <membre>",
            value="Ajoute un r√¥le malus √† un membre pour une dur√©e pr√©d√©finie de 24 heures. Exemple : !!malus @Utilisateur",
            inline=False
        )
        embed.add_field(
            name="‚ò†Ô∏è !!annihilation <membre>",
            value="Cible un membre pour l'an√©antissement. Exemple : !!annihilation @Utilisateur",
            inline=False
        )
        embed.add_field(
            name="üåå !!gravity <membre>",
            value=f"Ajoute le r√¥le {role_gravity.mention} √† un membre. Exemple : !!gravity @Utilisateur",  # Mention du r√¥le ici
            inline=False
        )
        embed.add_field(
            name="üöÄ !!spatial <membre>",
            value=f"Ajoute temporairement le r√¥le {role_spatial.mention} √† un membre. Exemple : !!spatial @Utilisateur",  # Mention du r√¥le ici
            inline=False
        )
        embed.add_field(
            name="üè• !!heal",
            value="Retire les malus et soigne l'utilisateur ex√©cutant la commande.",
            inline=False
        )
        embed.add_field(
            name="üõ°Ô∏è !!protect",
            value="Prot√®ge temporairement l'utilisateur des vols. Exemple : !!protect",
            inline=False
        )
        
        # Commandes li√©es au Livret A
        embed.add_field(
            name="üí∏ !!investirlivreta <montant>",
            value="Investit une somme dans le Livret A (max 100k). Exemple : !!investirlivreta 1000",
            inline=False
        )
        embed.add_field(
            name="üìà !!livreta",
            value="Affiche le solde actuel de ton Livret A.",
            inline=False
        )
        embed.add_field(
            name="üí∞ !!retirerlivreta <montant>",
            value="Retire une somme de ton Livret A. Exemple : !!retirerlivreta 500",
            inline=False
        )

        # Commandes li√©es √† l'entreprise
        embed.add_field(
            name="üèóÔ∏è !!constructionentreprise",
            value="Construis une entreprise (avec le r√¥le n√©cessaire). Exemple : !!constructionentreprise",
            inline=False
        )
        embed.add_field(
            name="üíº !!collectentreprise",
            value="Collecte les revenus de ton entreprise. Exemple : !!collectentreprise",
            inline=False
        )
        embed.add_field(
            name="üö∂‚Äç‚ôÇÔ∏è !!quitterentreprise",
            value="Quitte ou supprime ton entreprise. Exemple : !!quitterentreprise",
            inline=False
        )

        embed.set_thumbnail(url="https://github.com/Cass64/EtheryaBot/blob/main/images_etherya/etheryBot_profil.jpg?raw=true")
        embed.set_footer(text="Utilise ces commandes avec sagesse !")
        embed.set_image(url="https://github.com/Cass64/EtheryaBot/blob/main/images_etherya/etheryaBot_banniere.png?raw=true")

        await message.channel.send(embed=embed)

    # Assurez-vous que le bot continue de traiter les commandes
    await bot.process_commands(message)
#------------------------------------------------------------------------- auto clan
async def on_member_join(member):
    # Liste des r√¥les √† attribuer
    roles_to_assign = [
        "‚Ä≥ [ùë∫◊•] Frostar", 
        "‚Ä≥ [ùë∫◊•] T√©n√©bros", 
        "‚Ä≥ [ùë∫◊•] Luminis", 
        "‚Ä≥ [ùë∫◊•] Valkari"
    ]
    
    # V√©rifie si l'utilisateur a d√©j√† un des r√¥les
    existing_roles = [role.name for role in member.roles]
    if not any(role in roles_to_assign for role in existing_roles):
        # Choisir un r√¥le au hasard dans la liste
        role_name = random.choice(roles_to_assign)
        role = discord.utils.get(member.guild.roles, name=role_name)
        
        if role:
            # Ajouter le r√¥le √† l'utilisateur
            await member.add_roles(role)
            
            # Cr√©er l'embed
            embed = discord.Embed(
                title="üéâ Un nouveau membre rejoint !",
                description=f"{member.mention} vient de rejoindre le serveur et a √©t√© assign√© au r√¥le **{role_name}**.",
                color=discord.Color.white()
            )
            embed.set_footer(text="Bienvenue parmi nous !")
            
            # Envoyer l'embed dans le salon sp√©cifi√©
            channel = bot.get_channel(1344065559826006047)  # ID du salon
            if channel:
                await channel.send(embed=embed)

#------------------------------------------------------------------------- Lancement du bot
keep_alive()
bot.run(token)
