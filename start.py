import os  
from dotenv import load_dotenv
from discord import app_commands
import discord
from discord.ext import commands
from keep_alive import keep_alive
import random
import json
import asyncio
import pymongo
from pymongo import MongoClient
import datetime
import math

load_dotenv()

# Connexion MongoDB
mongo_uri = os.getenv("MONGO_URI")
client = MongoClient(mongo_uri)
db = client['Cass-Eco2']
collection = db['commandes']

# V√©rification MongoDB
try:
    client.admin.command('ping')
    print("‚úÖ Connexion √† MongoDB r√©ussie !")
except Exception as e:
    print(f"‚ùå √âchec de connexion √† MongoDB : {e}")
    exit()

cooldowns = {}

token = os.getenv('TOKEN_BOT_DISCORD')

# Intents et configuration du bot
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!!", intents=intents)

@bot.event
async def on_ready():
    print(f"Bot connect√© en tant que {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} commands")
    except Exception as e:
        print(e)
#------------------------------------------------------------------------- Commandes d'√©conomie : !!break

# Liste des r√¥les autoris√©s pour ex√©cuter les commandes de mod√©ration
AUTHORIZED_ROLES = ["‚Ä≥ [ùë∫◊•] Perm Anti Protect"]

@bot.command(name="break")
async def breakk(ctx, membre: discord.Member):
    """Ajoute un r√¥le fixe √† un utilisateur et retire un autre r√¥le fixe √† l'ex√©cutant.
       Seuls ceux ayant '[ùë∫◊•] Perm Anti Protect' peuvent utiliser cette commande.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Anti Protect"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_REMOVE_BREAK = "‚Ä≥ [ùë∫◊•] Protect !!rob"       # R√¥le √† ajouter au membre cibl√©
    ROLE_TO_REMOVE = "‚Ä≥ [ùë∫◊•] Perm Anti Protect"     # R√¥le √† retirer √† l'ex√©cutant

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_remove_break = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE_BREAK)
    role_to_remove = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE)

    if not role_required or not role_to_remove_break or not role_to_remove:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # V√©rifie si le membre a le r√¥le avant de le retirer
    if role_to_remove_break not in membre.roles:
        await ctx.send(f"{membre.mention} n'a pas le r√¥le {role_to_remove_break.mention}. <:haram:1176229029796380702>")
    else:
        await membre.remove_roles(role_to_remove_break)
        await ctx.send(f"Le r√¥le {role_to_remove_break.mention} a √©t√© enlev√©. <a:fete:1172810362261880873>")

    # Retirer le r√¥le √† l'ex√©cutant
    if role_to_remove in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove)
        await ctx.send(f"Le r√¥le {role_to_remove.mention} vous a √©t√© retir√©. <a:emoji:1341500461475168369>")
    else:
        await ctx.send(f"{ctx.author.mention}, vous n'aviez pas le r√¥le {role_to_remove.mention}. ‚ùå")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!malus

AUTHORIZED_ROLES = ["‚Ä≥ [ùë∫◊•] Perm Ajout Malus"]

@bot.command(name="malus")
async def malus(ctx, membre: discord.Member):
    """Ajoute un r√¥le fixe √† un utilisateur, retire un autre r√¥le fixe √† l'ex√©cutant, 
       et supprime le r√¥le ajout√© apr√®s une dur√©e sp√©cifi√©e.
       Seuls ceux ayant '[ùë∫◊•] Perm Ajout Malus' peuvent utiliser cette commande.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Ajout Malus"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD_MALUS = "‚Ä≥ [ùë∫◊•] Malus Temporelle"  # Le r√¥le temporaire √† ajouter
    ROLE_TO_REMOVE_MALUS = "‚Ä≥ [ùë∫◊•] Perm Ajout Malus"  # R√¥le √† retirer √† l'ex√©cutant

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add_malus = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD_MALUS)
    role_to_remove_malus = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE_MALUS)

    if not role_required or not role_to_add_malus or not role_to_remove_malus:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # Ajouter le r√¥le temporaire √† l'utilisateur
    await membre.add_roles(role_to_add_malus)
    await ctx.send(f"Le r√¥le {role_to_add_malus.mention} a √©t√© ajout√©. <a:fete:1172810362261880873>") 

    # Retirer le r√¥le √† l'ex√©cutant
    if role_to_remove_malus in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove_malus)
        await ctx.send(f"Le r√¥le {role_to_remove_malus.mention} a √©t√© retir√©. <a:emoji:1341500461475168369>")
    else:
        await ctx.send(f"{ctx.author.mention}, vous n'aviez pas le r√¥le {role_to_remove_malus.mention}. <:haram:1176229029796380702>")

    # Temps pendant lequel le r√¥le restera (exemple : 1 heure)
    await asyncio.sleep(86400)  # 86400 secondes = 24 heures

    # Retirer le r√¥le apr√®s le d√©lai
    await membre.remove_roles(role_to_add_malus)
    await ctx.send(f"Le r√¥le {role_to_add_malus.mention} a √©t√© retir√© de {membre.mention} apr√®s 24 heures. ‚è≥")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!annihilation

@bot.command(name="annihilation")
async def annihilation(ctx, membre: discord.Member):
    """Ajoute le r√¥le 'Cible D'an√©antissement' √† un utilisateur si l'ex√©cutant a le r√¥le 'Perm Crystal D'an√©antissement'.
       Un message est envoy√© automatiquement dans un salon sp√©cifique et l'ex√©cutant perd son r√¥le 'Perm Crystal D'an√©antissement'.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Crystal D'an√©antissement"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD = "‚Ä≥ [ùë∫◊•] Cible D'an√©antissement"  # R√¥le √† ajouter
    CHANNEL_ID = 1341844144032714833  # ID du salon o√π envoyer le message
    ROLE_PING = 792755123587645461

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD)
    channel = bot.get_channel(CHANNEL_ID)
    role_ping = discord.utils.get(ctx.guild.roles, name=ROLE_PING)

    if not role_required or not role_to_add or not channel:
        return await ctx.send("‚ùå L'un des r√¥les ou le salon sp√©cifi√© n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # Ajouter le r√¥le √† la cible
    await membre.add_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} a √©t√© ajout√© √† {membre.mention}. ‚ò†Ô∏è")

    # Retirer le r√¥le de l'ex√©cutant
    await ctx.author.remove_roles(role_required)
    await ctx.send(f"Le r√¥le {role_required.mention} vous a √©t√© retir√©, vous ne pouvez plus utiliser cette commande. ‚ùå")

    # Envoyer un message dans le salon sp√©cifi√©
    await channel.send(f"{membre.mention} a √©t√© cibl√© par un an√©antissement <@{ROLE_PING}>. ‚ö°")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!gravity

@bot.command(name="gravity")
async def gravity(ctx, membre: discord.Member):
    """Ajoute le r√¥le '‚Ä≥ [ùë∫◊•] Gravit√© Forte' √† un utilisateur, retire le r√¥le '‚Ä≥ [ùë∫◊•] Perm Gravit√© Forte' de l'ex√©cutant,
       et envoie un message confirmant l'op√©ration.
       Seuls ceux ayant le r√¥le '‚Ä≥ [ùë∫◊•] Perm Gravit√© Forte' peuvent utiliser cette commande.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Gravit√© Forte"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD = "‚Ä≥ [ùë∫◊•] Gravit√© Forte"  # R√¥le √† ajouter
    ROLE_TO_REMOVE = "‚Ä≥ [ùë∫◊•] Perm Gravit√© Forte"  # R√¥le √† retirer √† l'ex√©cutant

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD)
    role_to_remove = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE)

    if not role_required or not role_to_add or not role_to_remove:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # Ajouter le r√¥le √† la cible
    await membre.add_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} a √©t√© ajout√© √† {membre.mention}. üåå")

    # Retirer le r√¥le √† l'ex√©cutant
    if role_to_remove in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove)
        await ctx.send(f"Le r√¥le {role_to_remove.mention} vous a √©t√© retir√©. ‚ùå")
    else:
        await ctx.send(f"{ctx.author.mention}, vous n'aviez pas le r√¥le {role_to_remove.mention}. ‚ùå")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!spatial

@bot.command(name="spatial")
async def spatial(ctx):
    """Ajoute temporairement le r√¥le '[ùë∫◊•] Spatial' si l'utilisateur a '[ùë∫◊•] Perm Spatial',
       et applique un cooldown de 24 heures. L'heure de la derni√®re utilisation est enregistr√©e dans la base de donn√©es MongoDB.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Spatial"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD = "‚Ä≥ [ùë∫◊•] Spatial"  # R√¥le √† ajouter temporairement
    COOLDOWN_DURATION = 86400  # 24 heures en secondes
    TEMP_ROLE_DURATION = 3600  # 1 heure en secondes

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD)

    if not role_required or not role_to_add:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    # Connexion √† la base de donn√©es
    user_data = collection.find_one({"user_id": ctx.author.id})

    if user_data:
        last_used = user_data.get("last_used", 0)
    else:
        last_used = 0

    now = datetime.datetime.utcnow().timestamp()

    # V√©rifier si l'utilisateur est en cooldown
    if now - last_used < COOLDOWN_DURATION:
        remaining_time = int((COOLDOWN_DURATION - (now - last_used)) / 3600)
        return await ctx.send(f"‚ùå Vous devez attendre encore {remaining_time} heure(s) avant de r√©utiliser cette commande.")

    # Ajouter le r√¥le temporaire
    await ctx.author.add_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} vous a √©t√© attribu√© pour 1 heure. üöÄ")

    # Mettre √† jour l'heure de la derni√®re utilisation dans la base de donn√©es
    collection.update_one({"user_id": ctx.author.id}, {"$set": {"last_used": now}}, upsert=True)

    # Supprimer le r√¥le apr√®s 1 heure
    await asyncio.sleep(TEMP_ROLE_DURATION)
    await ctx.author.remove_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} vous a √©t√© retir√© apr√®s 1 heure. ‚è≥")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!heal

@bot.command(name="heal")
async def heal(ctx):
    """Supprime les r√¥les de malus et retire le r√¥le permettant d'utiliser la commande."""
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Anti-Dote"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_REMOVE_1 = "‚Ä≥ [ùë∫◊•] Gravit√© Forte"  # Premier r√¥le √† enlever
    ROLE_TO_REMOVE_2 = "‚Ä≥ [ùë∫◊•] Malus Temporelle"  # Deuxi√®me r√¥le √† enlever

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_remove_1 = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE_1)
    role_to_remove_2 = discord.utils.get(ctx.guild.roles, name=ROLE_TO_REMOVE_2)

    if not role_required or not role_to_remove_1 or not role_to_remove_2:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    roles_removed = []
    
    # V√©rifier et retirer les r√¥les si pr√©sents
    if role_to_remove_1 in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove_1)
        roles_removed.append(role_to_remove_1.name)

    if role_to_remove_2 in ctx.author.roles:
        await ctx.author.remove_roles(role_to_remove_2)
        roles_removed.append(role_to_remove_2.name)

    # Message en fonction du nombre de r√¥les supprim√©s
    if len(roles_removed) == 2:
        await ctx.send(f"‚ú® {ctx.author.mention}, vous avez √©t√© totalement purg√© de vos blessures et mal√©dictions ! Plus rien ne vous entrave. üè•")
    elif len(roles_removed) == 1:
        await ctx.send(f"üåø {ctx.author.mention}, vous avez √©t√© gu√©ri de **{roles_removed[0]}** ! Encore un petit effort pour √™tre totalement r√©tabli. üíä")
    else:
        await ctx.send(f"üòÇ {ctx.author.mention}, tu essaies de te soigner alors que tu n'as rien ? T'es un clown !? ü§°")

    # Retirer le r√¥le "Perm Anti-Dote" apr√®s l'utilisation
    await ctx.author.remove_roles(role_required)
    await ctx.send(f"üîª {ctx.author.mention}, votre **antidote** a √©t√© retir√© apr√®s utilisation.")

#------------------------------------------------------------------------- Commandes d'√©conomie : !!protect

@bot.command(name="protect")
async def protect(ctx):
    """Ajoute temporairement le r√¥le '[ùë∫◊•] Protect !!rob' si l'utilisateur a '[ùë∫◊•] Perm Protect !!rob',
       et applique un cooldown de 48 heures.
    """
    ROLE_REQUIRED = "‚Ä≥ [ùë∫◊•] Perm Protect !!rob"  # R√¥le requis pour ex√©cuter la commande
    ROLE_TO_ADD = "‚Ä≥ [ùë∫◊•] Protect !!rob"  # R√¥le √† ajouter temporairement
    COOLDOWN_DURATION = 172800  # 48 heures en secondes
    TEMP_ROLE_DURATION = 172800  # 48 heures en secondes

    role_required = discord.utils.get(ctx.guild.roles, name=ROLE_REQUIRED)
    role_to_add = discord.utils.get(ctx.guild.roles, name=ROLE_TO_ADD)

    if not role_required or not role_to_add:
        return await ctx.send("‚ùå L'un des r√¥les sp√©cifi√©s n'existe pas.")

    if role_required not in ctx.author.roles:
        return await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")

    now = datetime.datetime.utcnow().timestamp()

    # V√©rifier si l'utilisateur est en cooldown dans la base de donn√©es
    user_data = collection.find_one({"user_id": ctx.author.id})

    if user_data:
        last_used = user_data.get("last_used", 0)
        time_since_last_use = now - last_used
        if time_since_last_use < COOLDOWN_DURATION:
            remaining_time = int((COOLDOWN_DURATION - time_since_last_use) / 3600)
            return await ctx.send(f"‚ùå Vous devez attendre encore {remaining_time} heure(s) avant de r√©utiliser cette commande.")
    else:
        # Si l'utilisateur n'a pas de donn√©es dans la base, l'ajouter
        collection.insert_one({"user_id": ctx.author.id, "last_used": now})

    # Ajouter le r√¥le temporaire
    await ctx.author.add_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} vous a √©t√© attribu√© pour 2 jours. üöÄ")

    # Mettre √† jour l'heure d'utilisation dans la base de donn√©es
    collection.update_one({"user_id": ctx.author.id}, {"$set": {"last_used": now}}, upsert=True)

    # Supprimer le r√¥le apr√®s 48 heures
    await asyncio.sleep(TEMP_ROLE_DURATION)
    await ctx.author.remove_roles(role_to_add)
    await ctx.send(f"Le r√¥le {role_to_add.mention} vous a √©t√© retir√© apr√®s 2 jours. ‚è≥")

#------------------------------------------------------------------------- Commandes d'√©conomie : /embed

THUMBNAIL_URL = "https://github.com/Cass64/EtheryaBot/blob/main/images_etherya/etheryBot_profil.jpg?raw=true"

class EmbedBuilderView(discord.ui.View):
    def __init__(self, author: discord.User, channel: discord.TextChannel):
        super().__init__(timeout=180)
        self.author = author
        self.channel = channel  # Le salon o√π la commande a √©t√© ex√©cut√©e
        self.embed = discord.Embed(title="Titre", description="Description", color=discord.Color.blue())
        self.embed.set_thumbnail(url=THUMBNAIL_URL)  # Image fixe en haut √† droite
        self.second_image_url = None  # Pour stocker la deuxi√®me image

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user == self.author

    @discord.ui.button(label="Modifier le titre", style=discord.ButtonStyle.primary)
    async def edit_title(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedTitleModal(self))

    @discord.ui.button(label="Modifier la description", style=discord.ButtonStyle.primary)
    async def edit_description(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedDescriptionModal(self))

    @discord.ui.button(label="Changer la couleur", style=discord.ButtonStyle.primary)
    async def edit_color(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.embed.color = discord.Color.random()
        await interaction.response.edit_message(embed=self.embed, view=self)

    @discord.ui.button(label="Ajouter une image", style=discord.ButtonStyle.secondary)
    async def add_image(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedImageModal(self))

    @discord.ui.button(label="Ajouter 2√®me image", style=discord.ButtonStyle.secondary)
    async def add_second_image(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedSecondImageModal(self))

    @discord.ui.button(label="Envoyer", style=discord.ButtonStyle.success)
    async def send_embed(self, interaction: discord.Interaction, button: discord.ui.Button):
        embeds = [self.embed]
        if self.second_image_url:
            second_embed = discord.Embed(color=self.embed.color)
            second_embed.set_image(url=self.second_image_url)
            embeds.append(second_embed)
        await self.channel.send(embeds=embeds)
        await interaction.response.send_message("Embed envoy√© !", ephemeral=True)

class EmbedTitleModal(discord.ui.Modal, title="Modifier le Titre"):
    def __init__(self, view: EmbedBuilderView):
        super().__init__()
        self.view = view
        self.title_input = discord.ui.TextInput(label="Nouveau Titre", required=True)
        self.add_item(self.title_input)

    async def on_submit(self, interaction: discord.Interaction):
        self.view.embed.title = self.title_input.value
        await interaction.response.edit_message(embed=self.view.embed, view=self.view)

class EmbedDescriptionModal(discord.ui.Modal, title="Modifier la Description"):
    def __init__(self, view: EmbedBuilderView):
        super().__init__()
        self.view = view
        self.description_input = discord.ui.TextInput(label="Nouvelle Description", required=True, style=discord.TextStyle.long)
        self.add_item(self.description_input)

    async def on_submit(self, interaction: discord.Interaction):
        self.view.embed.description = self.description_input.value
        await interaction.response.edit_message(embed=self.view.embed, view=self.view)

class EmbedImageModal(discord.ui.Modal, title="Ajouter une image"):
    def __init__(self, view: EmbedBuilderView):
        super().__init__()
        self.view = view
        self.image_input = discord.ui.TextInput(label="URL de l'image", required=False)
        self.add_item(self.image_input)

    async def on_submit(self, interaction: discord.Interaction):
        if self.image_input.value:
            self.view.embed.set_image(url=self.image_input.value)  # Premi√®re image sous le texte
        await interaction.response.edit_message(embed=self.view.embed, view=self.view)

class EmbedSecondImageModal(discord.ui.Modal, title="Ajouter une 2√®me image"):
    def __init__(self, view: EmbedBuilderView):
        super().__init__()
        self.view = view
        self.second_image_input = discord.ui.TextInput(label="URL de la 2√®me image", required=False)
        self.add_item(self.second_image_input)

    async def on_submit(self, interaction: discord.Interaction):
        if self.second_image_input.value:
            self.view.second_image_url = self.second_image_input.value
        await interaction.response.edit_message(embed=self.view.embed, view=self.view)

@bot.tree.command(name="embed", description="Cr√©er un embed personnalis√©")
async def embed_builder(interaction: discord.Interaction):
    view = EmbedBuilderView(interaction.user, interaction.channel)
    await interaction.response.send_message(embed=view.embed, view=view, ephemeral=True)

# Exemple d'un event on_message pour ajouter une image √† partir d'une pi√®ce jointe, si besoin.
@bot.event
async def on_message(message):
    if message.attachments:  # Si un fichier est joint
        attachment = message.attachments[0]  # Prend la premi√®re image
        if attachment.content_type and attachment.content_type.startswith("image/"):
            embed = discord.Embed(title="Image ajout√©e")
            embed.set_thumbnail(url=THUMBNAIL_URL)  # Image fixe en haut √† droite
            embed.set_image(url=attachment.url)  # Image principale sous le texte
            await message.channel.send(embed=embed)
    await bot.process_commands(message)

# Pour lancer le bot (remplacez "VOTRE_TOKEN
#------------------------------------------------------------------------- Commandes classiques pour les pr√™ts

@bot.command(name="pret10k")
async def pret10k(ctx, membre: discord.Member):
    """Enregistre un pr√™t de 10k avec d√©tails dans un salon staff."""
    await enregistrer_pret(ctx, membre, montant=10000, montant_rendu=11500, duree="1 Semaine")

@bot.command(name="pret25k")
async def pret25k(ctx, membre: discord.Member):
    """Enregistre un pr√™t de 25k avec d√©tails dans un salon staff."""
    await enregistrer_pret(ctx, membre, montant=25000, montant_rendu=28750, duree="1 Semaine")

@bot.command(name="pret50k")
async def pret50k(ctx, membre: discord.Member):
    """Enregistre un pr√™t de 50k avec d√©tails dans un salon staff."""
    await enregistrer_pret(ctx, membre, montant=50000, montant_rendu=57500, duree="1 Semaine")

async def enregistrer_pret(ctx, membre, montant, montant_rendu, duree):
    """Enregistre un pr√™t avec d√©tails et envoie un message dans le salon staff."""
    CHANNEL_ID = 1340674704964583455  # Remplace par l'ID du salon staff
    salon_staff = bot.get_channel(CHANNEL_ID)

    if not salon_staff:
        return await ctx.send("‚ùå Le salon staff n'a pas √©t√© trouv√©.")

    embed = discord.Embed(title="üìú Nouveau Pr√™t", color=discord.Color.blue())
    embed.add_field(name="üë§ Pseudonyme", value=membre.mention, inline=True)
    embed.add_field(name="üí∞ Montant demand√©", value=f"{montant:,} cr√©dits", inline=True)
    embed.add_field(name="üìÑ Ticket/Formulaire", value="Ticket", inline=True)
    embed.add_field(name="üìÖ Date pour rendre", value=duree, inline=True)
    embed.add_field(name="üí≥ Montant √† rendre", value=f"{montant_rendu:,} cr√©dits", inline=True)
    embed.add_field(name="üîÑ Statut", value="En Cours", inline=True)
    embed.set_footer(text=f"Pr√™t enregistr√© par {ctx.author.display_name}")

    # Sauvegarde du pr√™t dans MongoDB
    prets_en_cours[membre.id] = {"montant": montant, "montant_rendu": montant_rendu, "statut": "En Cours"}
    collection.update_one({"user_id": membre.id}, {"$set": {"pret": prets_en_cours[membre.id]}}, upsert=True)

    await salon_staff.send(embed=embed)
    await ctx.send(f"‚úÖ Pr√™t de {montant:,} cr√©dits accord√© √† {membre.mention}. D√©tails envoy√©s aux staff.")

@bot.command(name="terminer")
async def terminer(ctx, membre: discord.Member):
    """Marque un pr√™t comme 'Pay√©' si l'utilisateur avait un pr√™t en cours."""
    CHANNEL_ID = 1340674704964583455  # Remplace par l'ID du salon staff
    salon_staff = bot.get_channel(CHANNEL_ID)

    if not salon_staff:
        return await ctx.send("‚ùå Le salon staff n'a pas √©t√© trouv√©.")

    # V√©rifier si l'utilisateur a un pr√™t en cours dans la base de donn√©es
    user_data = collection.find_one({"user_id": membre.id})
    if not user_data or "pret" not in user_data:
        return await ctx.send(f"‚ùå {membre.mention} n'a aucun pr√™t en cours.")

    # R√©cup√©ration des d√©tails du pr√™t
    pret = user_data["pret"]
    montant = pret["montant"]
    montant_rendu = pret["montant_rendu"]

    # Cr√©ation de l'embed pour confirmer le remboursement
    embed = discord.Embed(title="‚úÖ Pr√™t Rembours√©", color=discord.Color.green())
    embed.add_field(name="üë§ Pseudonyme", value=membre.mention, inline=True)
    embed.add_field(name="üí∞ Montant demand√©", value=f"{montant:,} cr√©dits", inline=True)
    embed.add_field(name="üìÑ Ticket/Formulaire", value="Ticket", inline=True)
    embed.add_field(name="üí≥ Montant rembours√©", value=f"{montant_rendu:,} cr√©dits", inline=True)
    embed.add_field(name="üîÑ Statut", value="Pay√©", inline=True)
    embed.set_footer(text=f"Pr√™t rembours√© confirm√© par {ctx.author.display_name}")

    # Mettre √† jour le statut du pr√™t dans la base de donn√©es
    pret["statut"] = "Pay√©"
    collection.update_one({"user_id": membre.id}, {"$set": {"pret": pret}})

    await salon_staff.send(embed=embed)
    await ctx.send(f"‚úÖ Le pr√™t de {montant:,} cr√©dits de {membre.mention} est marqu√© comme rembours√©.")

#------------------------------------------------------------------------- Commandes d'√©conomie : /frags, /pret, /pretpayer

# Dictionnaire pour stocker les pr√™ts en cours, maintenant persistant dans MongoDB
prets_en_cours = {}

@bot.tree.command(name="frags")
async def frags(interaction: discord.Interaction, user: discord.Member):
    """Ajoute le r√¥le Frags Quotidien √† un utilisateur pour 24 heures."""

    REQUIRED_ROLE = "‚Ä≥ [ùë∫◊•] Gestion & Finance Team"
    FRAG_ROLE = "‚Ä≥ [ùë∫◊•] Frags Quotidien"
    # V√©rifier si l'ex√©cutant a le r√¥le requis
    if not any(role.name == REQUIRED_ROLE for role in interaction.user.roles):
        await interaction.response.send_message("Tu n'as pas le r√¥le requis pour utiliser cette commande.")
        return
    
    frag_role = discord.utils.get(interaction.guild.roles, name=FRAG_ROLE)
    if frag_role:
        await user.add_roles(frag_role)
        await interaction.response.send_message(f"{user.mention} a vendu ses fragments de Veyron quotidien.")

        # Retirer le r√¥le apr√®s 24 heures
        await asyncio.sleep(86400)  # 86400 secondes = 24 heures
        await user.remove_roles(frag_role)
        await interaction.followup.send(f"Le r√¥le `{FRAG_ROLE}` a √©t√© retir√© de {user.mention} apr√®s 24 heures.")
    else:
        await interaction.response.send_message(f"Le r√¥le `{FRAG_ROLE}` n'existe pas sur ce serveur.")

# R√¥le requis pour ex√©cuter les commandes


@bot.tree.command(name="pret")
async def pret(interaction: discord.Interaction, membre: discord.Member, montant: int, montant_√†_rendre: int, duree: str):
    """Enregistre un pr√™t avec les d√©tails dans un salon staff."""
    
    REQUIRED_ROLE = "[ùë∫◊•] Gestion & Finance Team"  # D√©claration de la variable √† l'int√©rieur de la fonction

    # V√©rifier si l'utilisateur a le r√¥le requis
    if not any(role.name == REQUIRED_ROLE for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.")
        return

    # Enregistrer le pr√™t si l'utilisateur a le bon r√¥le
    await enregistrer_pret(interaction, membre, montant, montant_√†_rendre, duree)


async def enregistrer_pret(interaction, membre, montant, montant_√†_rendre, duree):
    """Enregistre un pr√™t avec d√©tails et envoie un message dans le salon staff."""
    CHANNEL_ID = 1340674704964583455  # Remplace par l'ID du salon staff
    salon_staff = interaction.guild.get_channel(CHANNEL_ID)

    if not salon_staff:
        return await interaction.response.send_message("‚ùå Le salon staff n'a pas √©t√© trouv√©.")

    embed = discord.Embed(title="üìú Nouveau Pr√™t", color=discord.Color.blue())
    embed.add_field(name="üë§ Pseudonyme", value=membre.mention, inline=True)
    embed.add_field(name="üí∞ Montant demand√©", value=f"{montant:,} cr√©dits", inline=True)
    embed.add_field(name="üìÑ Ticket/Formulaire", value="Ticket", inline=True)
    embed.add_field(name="üìÖ Date pour rendre", value=duree, inline=True)
    embed.add_field(name="üí≥ Montant √† rendre", value=f"{montant_√†_rendre:,} cr√©dits", inline=True)
    embed.add_field(name="üîÑ Statut", value="En Cours", inline=True)
    embed.set_footer(text=f"Pr√™t enregistr√© par {interaction.user.display_name}")

    # Sauvegarde du pr√™t dans MongoDB
    prets_en_cours[membre.id] = {"montant": montant, "montant_rendu": montant_√†_rendre, "statut": "En Cours"}
    collection.update_one({"user_id": membre.id}, {"$set": {"pret": prets_en_cours[membre.id]}}, upsert=True)

    await salon_staff.send(embed=embed)
    await interaction.response.send_message(f"‚úÖ Pr√™t de {montant:,} cr√©dits accord√© √† {membre.mention}. D√©tails envoy√©s aux staff.")

@bot.tree.command(name="pretpayer")
async def terminer(interaction: discord.Interaction, membre: discord.Member):
    """Marque un pr√™t comme 'Pay√©' si l'utilisateur avait un pr√™t en cours."""
    REQUIRED_ROLE = "[ùë∫◊•] Gestion & Finance Team"
    # V√©rifier si l'utilisateur a le r√¥le requis
    if not any(role.name == REQUIRED_ROLE for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.")
        return

    CHANNEL_ID = 1340674730683924593  # Remplace par l'ID du salon staff
    salon_staff = interaction.guild.get_channel(CHANNEL_ID)

    if not salon_staff:
        return await interaction.response.send_message("‚ùå Le salon staff n'a pas √©t√© trouv√©.")

    # V√©rifier si l'utilisateur a un pr√™t en cours dans la base de donn√©es
    user_data = collection.find_one({"user_id": membre.id})
    if not user_data or "pret" not in user_data:
        return await interaction.response.send_message(f"‚ùå {membre.mention} n'a aucun pr√™t en cours.")

    # R√©cup√©ration des d√©tails du pr√™t
    pret = user_data["pret"]
    montant = pret["montant"]
    montant_rendu = pret["montant_rendu"]

    # Cr√©ation de l'embed pour confirmer le remboursement
    embed = discord.Embed(title="‚úÖ Pr√™t Rembours√©", color=discord.Color.green())
    embed.add_field(name="üë§ Pseudonyme", value=membre.mention, inline=True)
    embed.add_field(name="üí∞ Montant demand√©", value=f"{montant:,} cr√©dits", inline=True)
    embed.add_field(name="üìÑ Ticket/Formulaire", value="Ticket", inline=True)
    embed.add_field(name="üí≥ Montant rembours√©", value=f"{montant_rendu:,} cr√©dits", inline=True)
    embed.add_field(name="üîÑ Statut", value="Pay√©", inline=True)
    embed.set_footer(text=f"Pr√™t rembours√© confirm√© par {interaction.user.display_name}")

    # Mettre √† jour le statut du pr√™t dans la base de donn√©es
    pret["statut"] = "Pay√©"
    collection.update_one({"user_id": membre.id}, {"$set": {"pret": pret}})

    await salon_staff.send(embed=embed)
    await interaction.response.send_message(f"‚úÖ Le pr√™t de {montant:,} cr√©dits de {membre.mention} est marqu√© comme rembours√©.")


#------------------------------------------------------------------------- Ignorer les messages des autres bots

@bot.event
async def on_message(message):
    # Ignorer les messages envoy√©s par d'autres bots
    if message.author.bot:
        return

    # V√©rifie si le message mentionne uniquement le bot
    if bot.user.mentioned_in(message) and message.content.strip() == f"<@{bot.user.id}>":
        embed = discord.Embed(
            title="üìú Liste des Commandes",
            description="Voici la liste des commandes disponibles :",
            color=discord.Color(0xFFFFFF)
        )

        embed.add_field(
            name="üí• `!!break <membre>`",
            value="Retire un r√¥le sp√©cifique √† un membre. Exemple : `!!break @Utilisateur`",
            inline=False
        )
        embed.add_field(
            name="‚è≥ `!!malus <membre>`",
            value="Ajoute un r√¥le malus √† un membre pour une dur√©e pr√©d√©finie de 24 heures. Exemple : `!!malus @Utilisateur`",
            inline=False
        )
        embed.add_field(
            name="‚ò†Ô∏è `!!annihilation <membre>`",
            value="Cible un membre pour l'an√©antissement. Exemple : `!!annihilation @Utilisateur`",
            inline=False
        )
        embed.add_field(
            name="üåå `!!gravity <membre>`",
            value="Ajoute le r√¥le 'Gravit√© Forte' √† un membre. Exemple : `!!gravity @Utilisateur`",
            inline=False
        )
        embed.add_field(
            name="üöÄ `!!spatial <membre>`",
            value="Ajoute temporairement le r√¥le 'Spatial' √† un membre. Exemple : `!!spatial @Utilisateur`",
            inline=False
        )
        embed.add_field(
            name="üè• `!!heal`",
            value="Retire les malus et soigne l'utilisateur ex√©cutant la commande.",
            inline=False
        )
        embed.add_field(
            name="üõ°Ô∏è `!!protect`",
            value="Prot√®ge temporairement l'utilisateur des vols. Exemple : `!!protect`",
            inline=False
        )

        embed.set_thumbnail(url="https://github.com/Cass64/EtheryaBot/blob/main/images_etherya/etheryBot_profil.jpg?raw=true")
        embed.set_footer(text="Utilise ces commandes avec sagesse !")
        embed.set_image(url="https://github.com/Cass64/EtheryaBot/blob/main/images_etherya/etheryaBot_banniere.png?raw=true")

        await message.channel.send(embed=embed)

    # Assurez-vous que le bot continue de traiter les commandes
    await bot.process_commands(message)
#------------------------------------------------------------------------- Lancement du bot
keep_alive()
bot.run(token)
